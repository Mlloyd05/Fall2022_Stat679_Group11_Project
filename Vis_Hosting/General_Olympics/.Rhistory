ggplot(aggregate(Medal ~ Age + Sport, olympics[(!is.na(olympics$Medal) &
(olympics$Sport %in% input$Sport_choice)), ], length)) + geom_point(aes(x = Age, y = Medal, col = Sport))
})
#The below code adds labels to the graph.
brks <- seq(-200, 200, 50)
lbls = paste0(as.character(c(seq(200, 0,-50), seq(50, 200, 50))))
#This is a gender based plot which plots bars in either direction based on gender and fills color based on gender based on the sport selected.
output$Gender_olympics_plot <- renderPlot ({
ggplot(
aggregate(Medal ~ Age + Sport + Sex, olympics[(!is.na(olympics$Medal) &
(olympics$Sport %in% input$Gender_Sport_choice)), ], length),
aes(
x = Age,
y = ifelse(Sex == "M", Medal * -1, Medal),
fill = Sex
)
) +
geom_bar(stat = "identity", width = .6) +   # draw the bars
scale_y_continuous(breaks = brks,   # Breaks
labels = lbls) + # Labels
coord_flip() +  # Flip axes
labs(title = "Comparing Gender Data", x = "Medals", y = "Age" ) +
theme_tufte() +  # Tufte theme from ggfortify
theme(plot.title = element_text(hjust = .5),
axis.ticks = element_blank()) +   # Centre plot title
scale_fill_brewer(palette = "Dark2")  # Color palette
})
oly_subset <- reactive({
olympics %>%
mutate(selected = 1 * (Team %in% input$team_choice) * (Sport %in% input$sport_choice)) %>%
filter(selected == 1)
})
#Plotting based on the aes_string function that allows the selection of x and y axes by the user for more customizability.
output$Effectiveness <- renderPlot({
ggplot(oly_subset()) +
geom_jitter(
aes_string(
input$Metric_choice,
input$Metric_choice2,
color = "Medal",
shape = "Sex"
),
width = .1,
height = .1
)
})
#Renders a table of the data points that are a part of the subset.
output$Table <- renderTable(oly_subset())
#Age distribution plots
olympics_subset <- reactive({
olympics %>%
mutate(selected = (
(Sport %in% input$Sport) &
(Year >= input$Year[1]) &
(Year <= input$Year[2])
))
})
output$olympics_age_dist_plot <- renderPlot({
line_plot(olympics[olympics$Sport %in% input$Sport & olympics$Year >= input$Year[1] & olympics$Year <= input$Year[2],])
})
output$athlete_distribution <- renderPlot({ggplot(agged_sport_data, aes(x=Sport, y=Athletes_Per_Event, fill = Age)) +
geom_bar(stat="identity", width=.5) +
labs(title="Ordered Bar Chart",
subtitle="Avg Age Vs Athlete Per Event Count",
caption="source: Olympics Dataset") +
theme(axis.text.x = element_text(angle=90, vjust=0.6)) + scale_fill_gradient2(low = "red", mid = "orange", high = "blue", midpoint = 12) + labs(y = "Athletes per Event")})
}
shinyApp(ui = ui, server = server)
runApp('Vis_Hosting/General_Olympics')
runApp('Vis_Hosting/General_Olympics')
rm(list = ls())
olympics <- read_csv("Shiny_Data/athlete_events.csv")
setwd("/Users/marwanlloyd/Github/Fall2022_Stat679_Group11_Project/Vis_Hosting/General_Olympics")
olympics <- read_csv("Shiny_Data/athlete_events.csv")
runApp()
runApp()
#Establishes the ui with the navigation bar and the two layouts, one general olympics, and one focused on gender.
col = colnames(olympics)
pot = c(col[4:6],col[10])
ui <-
navbarPage(
"Group 11 Shiny Prototype",
collapsible = TRUE,
inverse = TRUE,
theme = shinytheme("spacelab"),
tabPanel(
"Olympic Sports - Age vs. Medal",
sidebarLayout(sidebarPanel(
selectInput("Sport_choice", label = "Sport", choices = unique(olympics$Sport), multiple = TRUE, selected = c('Basketball', 'Football') ) ),
mainPanel(plotOutput("olympics_plot")),)
),
tabPanel(
"Sport-Gender Breakdown by Age",
sidebarLayout(sidebarPanel(
selectInput("Gender_Sport_choice", label = "Sport", choices = unique(olympics$Sport), multiple = TRUE, selected = 'Basketball')
),
mainPanel(plotOutput("Gender_olympics_plot")),)
),
tabPanel(
"Olympics Athelete Age Distribution",
sidebarLayout(
sidebarPanel(
style = paste0("height: 27vh; overflow-y: auto;"),
selectInput("Sport", label = "Sport", choices = unique(olympics$Sport),
multiple = TRUE, selected = c('Basketball', 'Football') ),
sliderInput("Year", "Year", min = min(olympics$Year), max = max(olympics$Year), c(1980, 2010), sep = "" ),
plotOutput("line")
),
mainPanel(
plotOutput("olympics_age_dist_plot")
),
)
),
tabPanel(
"Athlete Analysis",
fluidRow(column(
4,
selectInput("sport_choice", label = "Sport", choices = unique(olympics$Sport), multiple = TRUE , selected = 'Basketball') ),
column(
4,
selectInput("team_choice", label = "Team", choices = unique(olympics$Team), multiple = TRUE, selected = 'United States')
)),
selectInput("Metric_choice", label = "PlayerMetricX", choices = pot, selected = 'Age'),
selectInput("Metric_choice2", label = "PlayerMetricY", choices = pot, selected = 'Height'),
plotOutput("Effectiveness"),
tableOutput("Table")
),
tabPanel(
"Age vs. Athlete Count/Event",
plotOutput("athlete_distribution")
)
)
server <- function(input, output) {
#The below code renders the plot and connects with the ui object, based on the sports selected it produces various color coded dot graphs, colored by sport.
output$olympics_plot <- renderPlot ({
ggplot(aggregate(Medal ~ Age + Sport, olympics[(!is.na(olympics$Medal) &
(olympics$Sport %in% input$Sport_choice)), ], length)) + geom_point(aes(x = Age, y = Medal, col = Sport))
})
#The below code adds labels to the graph.
brks <- seq(-200, 200, 50)
lbls = paste0(as.character(c(seq(200, 0,-50), seq(50, 200, 50))))
#This is a gender based plot which plots bars in either direction based on gender and fills color based on gender based on the sport selected.
output$Gender_olympics_plot <- renderPlot ({
ggplot(
aggregate(Medal ~ Age + Sport + Sex, olympics[(!is.na(olympics$Medal) &
(olympics$Sport %in% input$Gender_Sport_choice)), ], length),
aes(
x = Age,
y = ifelse(Sex == "M", Medal * -1, Medal),
fill = Sex
)
) +
geom_bar(stat = "identity", width = .6) +   # draw the bars
scale_y_continuous(breaks = brks,   # Breaks
labels = lbls) + # Labels
coord_flip() +  # Flip axes
labs(title = "Comparing Gender Data", x = "Medals", y = "Age" ) +
theme_tufte() +  # Tufte theme from ggfortify
theme(plot.title = element_text(hjust = .5),
axis.ticks = element_blank()) +   # Centre plot title
scale_fill_brewer(palette = "Dark2")  # Color palette
})
oly_subset <- reactive({
olympics %>%
mutate(selected = 1 * (Team %in% input$team_choice) * (Sport %in% input$sport_choice)) %>%
filter(selected == 1)
})
#Plotting based on the aes_string function that allows the selection of x and y axes by the user for more customizability.
output$Effectiveness <- renderPlot({
ggplot(oly_subset()) +
geom_jitter(
aes_string(
input$Metric_choice,
input$Metric_choice2,
color = "Medal",
shape = "Sex"
),
width = .1,
height = .1
)
})
#Renders a table of the data points that are a part of the subset.
output$Table <- renderTable(oly_subset())
#Age distribution plots
olympics_subset <- reactive({
olympics %>%
mutate(selected = (
(Sport %in% input$Sport) &
(Year >= input$Year[1]) &
(Year <= input$Year[2])
))
})
output$olympics_age_dist_plot <- renderPlot({
line_plot(olympics[olympics$Sport %in% input$Sport & olympics$Year >= input$Year[1] & olympics$Year <= input$Year[2],])
})
output$athlete_distribution <- renderPlot({ggplot(agged_sport_data, aes(x=Sport, y=Athletes_Per_Event, fill = Age)) +
geom_bar(stat="identity", width=.5) +
labs(title="Ordered Bar Chart",
subtitle="Avg Age Vs Athlete Per Event Count",
caption="source: Olympics Dataset") +
theme(axis.text.x = element_text(angle=90, vjust=0.6)) + scale_fill_gradient2(low = "red", mid = "orange", high = "blue", midpoint = 12) + labs(y = "Athletes per Event")})
}
shinyApp(ui = ui, server = server)
ggplot(agged_sport_data, aes(x=Sport, y=Athletes_Per_Event, fill = Age)) +
geom_bar(stat="identity", width=.5) +
labs(title="Ordered Bar Chart",
subtitle="Avg Age Vs Athlete Per Event Count",
caption="source: mpg") +
theme(axis.text.x = element_text(angle=90, vjust=0.6)) + scale_fill_gradient2(low = "red", mid = "orange", high = "blue", midpoint = 12) + labs(y = "Athletes per Event")
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(shinythemes)
library(tidyverse)
library(ggthemes)
library(ggplot2)
olympics <- read_csv("/Users/marwanlloyd/Github/Fall2022_Stat679_Group11_Project/Vis_Hosting/General_Olympics/Shiny_Data/athlete_events.csv")
### functions used in app
line_plot <- function(df) {
ggplot(df, aes(Age, color=Sex)) +
geom_line(aes(fill=..count..), stat="bin", binwidth=1) +
ylab("Number of Athletes")
}
#Splits the data into subsets, with summary statistics for each and returns the result in a group by form, this one by age and sport.
aggregate(Medal ~ Age + Sport, olympics[(!is.na(olympics$Medal) & (olympics$Sport %in% c("Canoeing", "Cricket"))),], length)
agged_sport_data <- cbind(aggregate(Age ~ Sport, olympics, mean), aggregate(ID ~ Sport, olympics, length)$ID, aggregate(Event ~ Sport, olympics, function(Event) length(unique(Event)))$Event)
colnames(agged_sport_data) = c("Sport", "Age", "Count", "Unique_Events")
agged_sport_data$Athletes_Per_Event <- agged_sport_data$Count / agged_sport_data$Unique_Events
agged_sport_data <- agged_sport_data[order(agged_sport_data$Age), ]  # sort
agged_sport_data$Sport <- factor(agged_sport_data$Sport, levels = agged_sport_data$Sport)
#Establishes the ui with the navigation bar and the two layouts, one general olympics, and one focused on gender.
col = colnames(olympics)
pot = c(col[4:6],col[10])
ui <-
navbarPage(
"Group 11 Shiny Prototype",
collapsible = TRUE,
inverse = TRUE,
theme = shinytheme("spacelab"),
tabPanel(
"Olympic Sports - Age vs. Medal",
sidebarLayout(sidebarPanel(
selectInput("Sport_choice", label = "Sport", choices = unique(olympics$Sport), multiple = TRUE, selected = c('Basketball', 'Football') ) ),
mainPanel(plotOutput("olympics_plot")),)
),
tabPanel(
"Sport-Gender Breakdown by Age",
sidebarLayout(sidebarPanel(
selectInput("Gender_Sport_choice", label = "Sport", choices = unique(olympics$Sport), multiple = TRUE, selected = 'Basketball')
),
mainPanel(plotOutput("Gender_olympics_plot")),)
),
tabPanel(
"Olympics Athelete Age Distribution",
sidebarLayout(
sidebarPanel(
style = paste0("height: 27vh; overflow-y: auto;"),
selectInput("Sport", label = "Sport", choices = unique(olympics$Sport),
multiple = TRUE, selected = c('Basketball', 'Football') ),
sliderInput("Year", "Year", min = min(olympics$Year), max = max(olympics$Year), c(1980, 2010), sep = "" ),
plotOutput("line")
),
mainPanel(
plotOutput("olympics_age_dist_plot")
),
)
),
tabPanel(
"Athlete Analysis",
fluidRow(column(
4,
selectInput("sport_choice", label = "Sport", choices = unique(olympics$Sport), multiple = TRUE , selected = 'Basketball') ),
column(
4,
selectInput("team_choice", label = "Team", choices = unique(olympics$Team), multiple = TRUE, selected = 'United States')
)),
selectInput("Metric_choice", label = "PlayerMetricX", choices = pot, selected = 'Age'),
selectInput("Metric_choice2", label = "PlayerMetricY", choices = pot, selected = 'Height'),
plotOutput("Effectiveness"),
tableOutput("Table")
),
tabPanel(
"Age vs. Athlete Count/Event",
plotOutput("athlete_distribution")
)
)
server <- function(input, output) {
#The below code renders the plot and connects with the ui object, based on the sports selected it produces various color coded dot graphs, colored by sport.
output$olympics_plot <- renderPlot ({
ggplot(aggregate(Medal ~ Age + Sport, olympics[(!is.na(olympics$Medal) &
(olympics$Sport %in% input$Sport_choice)), ], length)) + geom_point(aes(x = Age, y = Medal, col = Sport))
})
#The below code adds labels to the graph.
brks <- seq(-200, 200, 50)
lbls = paste0(as.character(c(seq(200, 0,-50), seq(50, 200, 50))))
#This is a gender based plot which plots bars in either direction based on gender and fills color based on gender based on the sport selected.
output$Gender_olympics_plot <- renderPlot ({
ggplot(
aggregate(Medal ~ Age + Sport + Sex, olympics[(!is.na(olympics$Medal) &
(olympics$Sport %in% input$Gender_Sport_choice)), ], length),
aes(
x = Age,
y = ifelse(Sex == "M", Medal * -1, Medal),
fill = Sex
)
) +
geom_bar(stat = "identity", width = .6) +   # draw the bars
scale_y_continuous(breaks = brks,   # Breaks
labels = lbls) + # Labels
coord_flip() +  # Flip axes
labs(title = "Comparing Gender Data", x = "Medals", y = "Age" ) +
theme_tufte() +  # Tufte theme from ggfortify
theme(plot.title = element_text(hjust = .5),
axis.ticks = element_blank()) +   # Centre plot title
scale_fill_brewer(palette = "Dark2")  # Color palette
})
oly_subset <- reactive({
olympics %>%
mutate(selected = 1 * (Team %in% input$team_choice) * (Sport %in% input$sport_choice)) %>%
filter(selected == 1)
})
#Plotting based on the aes_string function that allows the selection of x and y axes by the user for more customizability.
output$Effectiveness <- renderPlot({
ggplot(oly_subset()) +
geom_jitter(
aes_string(
input$Metric_choice,
input$Metric_choice2,
color = "Medal",
shape = "Sex"
),
width = .1,
height = .1
)
})
#Renders a table of the data points that are a part of the subset.
output$Table <- renderTable(oly_subset())
#Age distribution plots
olympics_subset <- reactive({
olympics %>%
mutate(selected = (
(Sport %in% input$Sport) &
(Year >= input$Year[1]) &
(Year <= input$Year[2])
))
})
output$olympics_age_dist_plot <- renderPlot({
line_plot(olympics[olympics$Sport %in% input$Sport & olympics$Year >= input$Year[1] & olympics$Year <= input$Year[2],])
})
output$athlete_distribution <- renderPlot({ggplot(agged_sport_data, aes(x=Sport, y=Athletes_Per_Event, fill = Age)) +
geom_bar(stat="identity", width=.5) +
labs(title="Ordered Bar Chart",
subtitle="Avg Age Vs Athlete Per Event Count",
caption="source: Olympics Dataset") +
theme(axis.text.x = element_text(angle=90, vjust=0.6)) + scale_fill_gradient2(low = "red", mid = "orange", high = "blue", midpoint = 12) + labs(y = "Athletes per Event")})
}
shinyApp(ui = ui, server = server)
rm(list = ls())
runApp()
rm(list = ls())
library(shiny)
library(shinythemes)
library(tidyverse)
library(ggthemes)
library(ggplot2)
olympics <- read_csv("/Users/marwanlloyd/Github/Fall2022_Stat679_Group11_Project/Vis_Hosting/General_Olympics/Shiny_Data/athlete_events.csv")
### functions used in app
line_plot <- function(df) {
ggplot(df, aes(Age, color=Sex)) +
geom_line(aes(fill=..count..), stat="bin", binwidth=1) +
ylab("Number of Athletes")
}
#Splits the data into subsets, with summary statistics for each and returns the result in a group by form, this one by age and sport.
aggregate(Medal ~ Age + Sport, olympics[(!is.na(olympics$Medal) & (olympics$Sport %in% c("Canoeing", "Cricket"))),], length)
agged_sport_data <- cbind(aggregate(Age ~ Sport, olympics, mean), aggregate(ID ~ Sport, olympics, length)$ID, aggregate(Event ~ Sport, olympics, function(Event) length(unique(Event)))$Event)
colnames(agged_sport_data) = c("Sport", "Age", "Count", "Unique_Events")
agged_sport_data$Athletes_Per_Event <- agged_sport_data$Count / agged_sport_data$Unique_Events
agged_sport_data <- agged_sport_data[order(agged_sport_data$Age), ]  # sort
agged_sport_data$Sport <- factor(agged_sport_data$Sport, levels = agged_sport_data$Sport)
#Establishes the ui with the navigation bar and the two layouts, one general olympics, and one focused on gender.
col = colnames(olympics)
pot = c(col[4:6],col[10])
ui <-
navbarPage(
"Group 11 Shiny Prototype",
collapsible = TRUE,
inverse = TRUE,
theme = shinytheme("spacelab"),
tabPanel(
"Olympic Sports - Age vs. Medal",
sidebarLayout(sidebarPanel(
selectInput("Sport_choice", label = "Sport", choices = unique(olympics$Sport), multiple = TRUE, selected = c('Basketball', 'Football') ) ),
mainPanel(plotOutput("olympics_plot")),)
),
tabPanel(
"Sport-Gender Breakdown by Age",
sidebarLayout(sidebarPanel(
selectInput("Gender_Sport_choice", label = "Sport", choices = unique(olympics$Sport), multiple = TRUE, selected = 'Basketball')
),
mainPanel(plotOutput("Gender_olympics_plot")),)
),
tabPanel(
"Olympics Athelete Age Distribution",
sidebarLayout(
sidebarPanel(
style = paste0("height: 27vh; overflow-y: auto;"),
selectInput("Sport", label = "Sport", choices = unique(olympics$Sport),
multiple = TRUE, selected = c('Basketball', 'Football') ),
sliderInput("Year", "Year", min = min(olympics$Year), max = max(olympics$Year), c(1980, 2010), sep = "" ),
plotOutput("line")
),
mainPanel(
plotOutput("olympics_age_dist_plot")
),
)
),
tabPanel(
"Athlete Analysis",
fluidRow(column(
4,
selectInput("sport_choice", label = "Sport", choices = unique(olympics$Sport), multiple = TRUE , selected = 'Basketball') ),
column(
4,
selectInput("team_choice", label = "Team", choices = unique(olympics$Team), multiple = TRUE, selected = 'United States')
)),
selectInput("Metric_choice", label = "PlayerMetricX", choices = pot, selected = 'Age'),
selectInput("Metric_choice2", label = "PlayerMetricY", choices = pot, selected = 'Height'),
plotOutput("Effectiveness"),
tableOutput("Table")
),
tabPanel(
"Age vs. Athlete Count/Event",
plotOutput("athlete_distribution")
)
)
server <- function(input, output) {
#The below code renders the plot and connects with the ui object, based on the sports selected it produces various color coded dot graphs, colored by sport.
output$olympics_plot <- renderPlot ({
ggplot(aggregate(Medal ~ Age + Sport, olympics[(!is.na(olympics$Medal) &
(olympics$Sport %in% input$Sport_choice)), ], length)) + geom_point(aes(x = Age, y = Medal, col = Sport))
})
#The below code adds labels to the graph.
brks <- seq(-200, 200, 50)
lbls = paste0(as.character(c(seq(200, 0,-50), seq(50, 200, 50))))
#This is a gender based plot which plots bars in either direction based on gender and fills color based on gender based on the sport selected.
output$Gender_olympics_plot <- renderPlot ({
ggplot(
aggregate(Medal ~ Age + Sport + Sex, olympics[(!is.na(olympics$Medal) &
(olympics$Sport %in% input$Gender_Sport_choice)), ], length),
aes(
x = Age,
y = ifelse(Sex == "M", Medal * -1, Medal),
fill = Sex
)
) +
geom_bar(stat = "identity", width = .6) +   # draw the bars
scale_y_continuous(breaks = brks,   # Breaks
labels = lbls) + # Labels
coord_flip() +  # Flip axes
labs(title = "Comparing Gender Data", x = "Medals", y = "Age" ) +
theme_tufte() +  # Tufte theme from ggfortify
theme(plot.title = element_text(hjust = .5),
axis.ticks = element_blank()) +   # Centre plot title
scale_fill_brewer(palette = "Dark2")  # Color palette
})
oly_subset <- reactive({
olympics %>%
mutate(selected = 1 * (Team %in% input$team_choice) * (Sport %in% input$sport_choice)) %>%
filter(selected == 1)
})
#Plotting based on the aes_string function that allows the selection of x and y axes by the user for more customizability.
output$Effectiveness <- renderPlot({
ggplot(oly_subset()) +
geom_jitter(
aes_string(
input$Metric_choice,
input$Metric_choice2,
color = "Medal",
shape = "Sex"
),
width = .1,
height = .1
)
})
#Renders a table of the data points that are a part of the subset.
output$Table <- renderTable(oly_subset())
#Age distribution plots
olympics_subset <- reactive({
olympics %>%
mutate(selected = (
(Sport %in% input$Sport) &
(Year >= input$Year[1]) &
(Year <= input$Year[2])
))
})
output$olympics_age_dist_plot <- renderPlot({
line_plot(olympics[olympics$Sport %in% input$Sport & olympics$Year >= input$Year[1] & olympics$Year <= input$Year[2],])
})
output$athlete_distribution <- renderPlot({ggplot(agged_sport_data, aes(x=Sport, y=Athletes_Per_Event, fill = Age)) +
geom_bar(stat="identity", width=.5) +
labs(title="Ordered Bar Chart",
subtitle="Avg Age Vs Athlete Per Event Count",
caption="source: Olympics Dataset") +
theme(axis.text.x = element_text(angle=90, vjust=0.6)) + scale_fill_gradient2(low = "red", mid = "orange", high = "blue", midpoint = 12) + labs(y = "Athletes per Event")})
}
shinyApp(ui = ui, server = server)
theme_set
rm(list = ls())
runApp()
runApp()
runApp()
runApp()
runApp()
